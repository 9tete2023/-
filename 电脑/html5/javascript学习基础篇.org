#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:[11pt,oneside]
#+LATEX_HEADER: \usepackage{article}


#+TITLE: javascript学习基础篇
#+AUTHOR: 万泽(德山书生)
#+CREATOR: wanze(<a href="mailto:a358003542@163.com">a358003542@163.com</a>)
#+DESCRIPTION: 制作者邮箱：a358003542@gmail.com


 
* beginning
之前我已经学习过python语言和lisp语言了，所以对于程序语言大部分东西我都无意罗嗦了，而且javascript语言和python语言又有很多很多相近之处，使得本文将异常的简单。并不适合做初学者的指南。

** 注释
用 ~//~ 来标记一行注释。
#+BEGIN_SRC js
// This is a comment that the computer will ignore. 
// It is for your eyes only!
#+END_SRC

** alert函数
弹出一段警告信息
#+BEGIN_EXAMPLE
alert("hello")
#+END_EXAMPLE

** console.log函数
在浏览器开发者工具那里是控制台的打印命令，在网页中是弹出一个信息框。
#+BEGIN_EXAMPLE
console.log("hello")
#+END_EXAMPLE

** confirm函数
弹出一个对话框，可以和用户互动点击确定或取消。根据用户的点击返回true或false。
#+BEGIN_EXAMPLE
confirm('This is an example of using JS to create some interaction on a website. Click OK to continue!');
#+END_EXAMPLE

** prompt函数
弹出一个对话框，具体是一个输入框，输入的值就是该函数的返回值。
#+BEGIN_EXAMPLE
var age = prompt("what's your age");
#+END_EXAMPLE




* 程序中的操作对象
各个编程语言的数据类型底层大致都差不多的吧: 数值型，字符串型（javascript同python一样单引号双引号都可以），布尔型（javascript是true和false），然后其他常规数值运算和逻辑运算（如 ~&&~ ~||~ ~!~ 之类）和比较运算（这里值得一提的是和python的 ~==~ 对应的javascript的比较运算符应该是 ~===~ ，三个等号，这算是javascript的一个历史遗留语法瑕疵问题。）等都大体相同。python中的None对应的是javascript的 ~null~ 。

然后高级数据类型各个编程语言差异就很大了，不过javascript似乎和python在基本高级数据类型上也很接近，比如说javascript的数组就类似于python的列表:
#+BEGIN_EXAMPLE
[1, 2, 3.14, 'Hello', null, true];
#+END_EXAMPLE

其索引index编号法则也和python一致。

然后javascript还有一个什么对象的概念，其大体可以看作python中的字典类型。
#+BEGIN_EXAMPLE
var person = {
    name: 'Bob',
    age: 20,
    tags: ['js', 'web', 'mobile'],
    city: 'Beijing',
    zipcode: null
};
#+END_EXAMPLE

如下所示具体调用各个数值也是类似的:
#+BEGIN_EXAMPLE
person['name']
"Bob"
person.name
"Bob"
#+END_EXAMPLE


** 变量
#+BEGIN_SRC js
var x;
var count = 2;
#+END_SRC 

*** strict模式
根本 [[http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499190108eec0bdf14e704a09935cd112e501e31a000][参考资料3这里]] 的介绍，写javascript代码声明变量都推荐加上 ~var~ ，可以在js代码前面加上:
#+BEGIN_EXAMPLE
'use strict';
#+END_EXAMPLE
来强制这样做，不过这个心里有数就行了。


** 数值
javascript整数和浮点数都不分了，都统一表示为Number，然后数值其他的一些内容如果你学习过其他一门编程语言那么基本上没啥新鲜玩意儿了。

#+BEGIN_EXAMPLE
console.log(typeof 2)
number
#+END_EXAMPLE

** 字符串 
*** 多行字符串
这个对应的是python的 ''' 三引号情况。javascript是这样表示的:

#+BEGIN_SRC js
`多行
字符串
`
#+END_SRC
也即使用那个反斜点符号包围之。

*** 字符串的一些方法清单
- length :: 字符串长度
#+BEGIN_EXAMPLE
> "string".length
6
#+END_EXAMPLE
- toUpperCase :: 变成大写
- toLowerCase :: 变成小写
- indexOf :: 返回子字符串出现的索引位置
index索引编号规则和python相同，这里就不多说了。
#+BEGIN_SRC js
> "string".substring(0,3)
'str'
#+END_SRC
- substring :: 返回子字符串



** 数组
对应于python中的列表，javascript这里称为数组。如下所示我们看到其也是可变的。
#+BEGIN_EXAMPLE
lst
[1, 2, 3, 4, 5]
lst[0] = 2
2
lst
[2, 2, 3, 4, 5]
#+END_EXAMPLE

*** 数组的一些方法清单
- length :: 数组长度
- indexOf :: 返回数组某个子元素的索引位置
- slice :: 切片操作，类似字符串的substring方法
- push :: 末尾添加一个元素 
- pop :: 最后一个元素删除
- unshift :: 数组头部添加一个或多个元素，返回新数组的长度
- shift :: 数组头部删除一个元素
- sort :: 排序，破坏型。值得一提的是对于数字排序并不是按照从大到小的顺序来的，不太清楚为何:

#+BEGIN_EXAMPLE
> var lst = [1,5,2,3,51,4,45,545,541,48,77]
undefined
> lst.sort()
[ 1,
  2,
  3,
  4,
  45,
  48,
  5,
  51,
  541,
  545,
  77 ]
#+END_EXAMPLE

- reverse :: 反转，破坏型。
- splice :: 从指定的索引删除某些元素，然后在此处添加某些元素，相当于update更新了。
#+BEGIN_EXAMPLE
> var arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];
undefined
> arr.splice(2, 3, 'Google', 'Facebook'); 
["Yahoo", "AOL", "Excite"]
> arr
["Microsoft", "Apple", "Google", "Facebook", "Oracle"]
#+END_EXAMPLE
参数意思是从索引2开始删除3个元素，然后添加后面的元素。从上面的例子可以看出splice方法是破坏型的方法，然后其返回的是删除了的那是那个元素。

splice方法也可以用于只删除不添加也就是纯删除操作，或只添加不删除的纯添加操作。

#+BEGIN_EXAMPLE
// 只删除,不添加:
arr.splice(2, 2);
// 只添加,不删除:
arr.splice(2, 0, 'Google', 'Facebook');
#+END_EXAMPLE

- concat :: 连接两个数组，非破坏型。
#+BEGIN_EXAMPLE
> var lst1 = [1,2,3]
undefined
> var lst2 = ['a','b','c']
undefined
> lst1.concat(lst2)
[1, 2, 3, "a", "b", "c"]
#+END_EXAMPLE

- join :: 类似于python字符串的join方法，如下所示:
#+BEGIN_EXAMPLE
var arr = ['A', 'B', 'C', 1, 2, 3];
arr.join('-'); // 'A-B-C-1-2-3'
#+END_EXAMPLE


** 对象
其大致可以对应到python中的字典的概念。
#+BEGIN_EXAMPLE
var person = {
    name: 'Bob',
    age: 20,
    tags: ['js', 'web', 'mobile'],
    city: 'Beijing',
    zipcode: null
};
#+END_EXAMPLE

javascript的对象的value还可以是某个函数，这样的话其实际上就类似于python中的类一样，成了一个方法了。然后类似python的self，其也有一个 ~this~ 关键词来表示本对象实例。



*** in语句
#+BEGIN_EXAMPLE
'name' in xiaoming;
#+END_EXAMPLE
#+BEGIN_EXAMPLE
> var d = {}
undefined
> d['a'] = 1
1
> d
Object {a: 1}
> 'a' in d
true
> 1 in [1,2,3]
true
#+END_EXAMPLE

*** delete语句
其对应的就是python的del语句。然后我们看到javascript的 ~delete~ 语句删除不存在键也不会报错。
#+BEGIN_EXAMPLE
> d
Object {a: 1}
> delete d.b
true
> d
Object {a: 1}
> delete d.a
true
> d
Object {}
#+END_EXAMPLE


*** hasOwnProperty方法
对应于python2的has_key方法，不过python2已经移除了，推荐用in语句。
#+BEGIN_EXAMPLE
d = {'a':1}
Object {a: 1}
d.hasOwnProperty('a')
true
#+END_EXAMPLE


*** this关键词
this关键词的使用较为困难，参考 [[cite4][参考资料4]] 的描述大体有:
1. this在函数内部表示本函数自身
2. 如果在方法里面（这里强调方法是指对象的某个数值的值是函数对象），则this是本对象。
.....还有一些混淆的情况...


*** hello方法
重定义hello方法相当于python的重定义 ~__init__~ 方法，其为该对象的重构函数，这样你就可以使用 ~new~ 来新建一个实例了。
#+BEGIN_EXAMPLE
s = new Student('John') 
#+END_EXAMPLE

*** name属性
name属性是一个特殊的属性，常用来表示该对象的名字。




** 集合
javascript中的集合Set大体也和python中的集合概念相近。
#+BEGIN_EXAMPLE
var s1 = new Set(); // 空Set
var s2 = new Set([1, 2, 3]); // 含1, 2, 3
#+END_EXAMPLE

然后其也有 ~add~ 方法用于添加一个元素。用 ~delete~ 方法来删除某个元素。


** Date对象
#+BEGIN_EXAMPLE
var now = new Date();
now; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)
now.getFullYear(); // 2015, 年份
now.getMonth(); // 5, 月份，注意月份范围是0~11，5表示六月
now.getDate(); // 24, 表示24号
now.getDay(); // 3, 表示星期三
now.getHours(); // 19, 24小时制
now.getMinutes(); // 49, 分钟
now.getSeconds(); // 22, 秒
now.getMilliseconds(); // 875, 毫秒数
now.getTime(); // 1435146562875, 以number形式表示的时间戳
#+END_EXAMPLE


* 程序中的逻辑
** 布尔值
javascript的布尔值是 ~true~ 和 ~false~ 。然后需要额外强调的是，类似python的比较判断（==）符号在javascript中是 ~===~ ，三个等号，这不是什么别出心裁，也没有任何实际的好处，就是javascript的历史遗留问题罢了。
#+BEGIN_EXAMPLE
=== Equal to
!== Not equal to
#+END_EXAMPLE

** null
javascript的是 ~null~ 。其也是一个单独的对象。

** undefined
undefined也是一个额外的对象。大部分时候你都会获得undefined，但是有时，比如你明确要求返回null，或者document.getElementById如果找不到element则会返回null（参考了 [[cite4][参考资料4]] ）。所以undefined更接近python的None的概念。


** 条件判断结构
条件判断结构，和python大同小异，除了那些圆括号（记住这个圆括号必须加上）和花括号。
#+BEGIN_SRC js
var feedback = 10
if(feedback > 8){
    console.log("Thank you! We should race at the next concert!")}
else{
    console.log("I'll keep practicing coding and racing.")}
#+END_SRC

虽然javascript不想python那样强制缩进风格，但还是推荐用缩进来增强你的代码可读性和逻辑清晰性，如:
#+BEGIN_SRC js
age = 20
if(age < 6){
    console.log('kid')}
else if(age >= 18){
    console.log('adult')}
else{
    console.log('teenager')}
#+END_SRC

这种写法使得代码更加接近python风格，然后我们可以把第一个花括号视作python缩进区块开始的冒号，然后后面的花括号视作某个区块部分语句结束的标识。

所以我们下面写一个更加复杂点的例子（具体这些小脚本的试验推荐在ubuntu下安装nodejs，然后执行 ~nodejs test.js~ 即可。）。原python脚本如下:
#+BEGIN_SRC python
x=-2
if x>0:
    print('x大于0')
    if x>2:
        print('x>2')
    elif x<2:
        print('0<x<2')
    else:
        print('x=2')
elif x<0:
    print('x小于0')
else:
    print('x等于0')
#+END_SRC

改写成为:
#+BEGIN_SRC js
var x = -1
if(x>0){
    console.log('x大于0')
    if(x>2){
        console.log('x>2')}
    else if(x<2){
        console.log('0<x<2')}
    else{
        console.log('x=2')}}
else if(x<0){
    console.log('x小于0')}
else{
    console.log('x等于0')}
#+END_SRC

读者可以用不同的x值来测试一下，这里的关键性问题不是区块开始那里，而是区块什么时候结束。然后就是程序结构最好清清晰晰的用 if else 或者 if else if else if else 等这类语句表达出来。关于多个else if语句的组合平行表达，读者可以自己试验一下，我简单写了下面这个例子:
#+BEGIN_SRC js
age = 5
if(age < 6){
    console.log('age 小于 6')}
else if(age >= 25){
    console.log('age 大于等于 25')}
else if(age >= 18){
    console.log('age 大于等于18且小于25')}
else{
    console.log('age 大于等于6且小于18')}
#+END_SRC

javascript有switch语句，作为我们pythoner你懂的，能用多个else if语句也可以的。

** 循环结构
javascript和python都有while语句，但while语句用的较少，更多的是使用for语句。javascript的for语句老式风格和c语句接近，而现在有新式的for语句风格了，更接近python的风格。如下所示:

#+BEGIN_SRC js
for(var i in [1,2,3]){
    console.log(i)}
#+END_SRC

需要注意的有两点: 一是括号和花括号；二是变量的var声明（记得javascript里面不管是本地变量还是全局变量等，只要名字是新出来的，都要var声明一下）。

然后递归遍历字典的key也是可以的:
#+BEGIN_SRC js
for(var i in {'a':1,'b':2}){
    console.log(i)}
#+END_SRC

*** while语句
while语句简单了解下吧，熟悉c语言的简单看一下就清楚了。

#+BEGIN_SRC js
var x = 0;
var n = 99;
while (n > 0) {
    x = x + n;
    n = n - 2;
}
#+END_SRC

还有do while 语句

#+BEGIN_SRC js
var n = 0;
do {
    n = n + 1;
}while (n < 100);

#+END_SRC



* 函数
** 定义函数
一个简单的函数定义和使用如下所示:
#+BEGIN_EXAMPLE
var greeting = function(name){
    console.log(name);
}
greeting('hello')
#+END_EXAMPLE
我们看到javascript明确将函数名作为一个变量，这是唯一要值得注意的，不过你也可以采用这种写法，这样更加为我们所熟悉了:
#+BEGIN_SRC js
function abs(x){
    if(x >= 0){
        return x;} 
    else{
        return -x;}
}
#+END_SRC

这两种定义风格是完全等价的。

这里值得一提的是如果函数没有确定return值，则视作返回的undefined。

** arguments用法
javascript的函数内部可以直接使用arguments这个变量，其不是一个Array，但可以如下使用:
#+BEGIN_EXAMPLE
arguments[0]
arguments.length
#+END_EXAMPLE


** 箭头函数
就是匿名函数lambda的一种写法。暂时不太关心、


* 面向DOM的操作
** window
window是一个全局变量，表示本浏览器的窗口。

- innerWidth :: 本窗口的内部宽度
所谓的内部宽度是指除去菜单栏工具栏等具体显示网页的净宽度。
- innerHeight :: 本窗口的内部高度，内部高度含义类似上面谈及的内部宽度。
- outerWidth :: 本窗口的外部宽度
- outerHeight :: 本窗口的外部高度

** navigator
其有属性如下所示:
- appName :: 浏览器名称；
- appVersion :: 浏览器版本；
- language :: 浏览器设置的语言；
- platform :: 操作系统类型；
- userAgent :: 浏览器设定的User-Agent字符串。

** screen
- width :: 屏幕宽度
- height :: 屏幕高度
- colorDepth :: 颜色位数

** location
- href :: 完整路径
- protocol :: 如下所示:
#+BEGIN_EXAMPLE
> location.protocol
"http:"
#+END_EXAMPLE

- host :: 对应python urlsplit之后的netloc
- port :: 端口号
- pathname :: 对应python urlsplit之后的path
- search :: 参数字段
- hash :: 也就是segement

------

- assign() :: 刷新当前页面
- reload() :: 重载当前页面

** document
你可以认为这是beautifulsoup刷过之后的网页文档树。简单的写入html代码:
#+BEGIN_SRC js
<script>
document.write("<h1>This is a heading</h1>");
document.write("<p>This is a paragraph.</p>");
</script>
#+END_SRC

按钮点击一下则执行什么javascript代码。
#+BEGIN_SRC js
<button type="button" onclick="alert('Welcome!')">点击这里</button>
#+END_SRC

javascript改变HTML内容
#+BEGIN_SRC js
<script>
function myFunction()
{
x=document.getElementById("demo");  // 找到元素
x.innerHTML="Hello JavaScript!";    // 改变内容
}
</script>

<button type="button" onclick="myFunction()">点击这里</button>
#+END_SRC


- title :: title标签内所含的内容
- cookie :: 获取cookie的内容
- getElementById() :: 该方法用于根据Id来提取网页内容的某个DOM子节点
- getElementsByTagName() :: 该方法用于根据Tag标签名字来提取某个DOM子节点（看到那个Elements的s，其将返回多个命中目标。记住带s的这些将返回的是一个数组对象）
- getElementsByClassName() :: 该方法用于根据css来进行选择某些DOM子节点。

返回的所谓DOM子节点对象，可以如同document对象一样使用这三个方法，相当于在第一次查找结果之上进一步查找。

- querySelector() :: 类似beautifulsoup的selector选择语法:
#+BEGIN_EXAMPLE
var ps = q1.querySelectorAll('div.highlighted > p');
#+END_EXAMPLE
- querySelectorAll() :: 类似上面，但返回所有结果。


找到目标标签元素之后，各个样式属性可以如下直接引用:
#+BEGIN_EXAMPLE
document.querySelector('a').href
#+END_EXAMPLE


*** 修改节点的文本内容
- innerHTML :: 对应该DOM节点标签内的文本内容
- innerText :: 类似上面的innerHTML，但不可设置任何HTML标签


- createElement() :: 创建一个标签元素对象:
#+BEGIN_EXAMPLE
haskell = document.createElement('p');
haskell.id = 'haskell';
haskell.innerText = 'Haskell';
#+END_EXAMPLE
- appendChild() :: 本标签元素为所谓的父节点，给自己添加一个子节点标签元素
- insertBefore() :: 本标签元素为所谓的父节点，然后在其内的某个标签元素之前插入某个子节点标签元素:
#+BEGIN_EXAMPLE
parentElement.insertBefore(newElement, referenceElement);
#+END_EXAMPLE

- parentElement :: 返回本标签元素对象的父标签元素对象
- removeChild() :: 本标签元素为父节点，删除本父节点的某个子节点

但是实际使用中推荐用jquery来操作各个DOM节点。

*** 改变图片颜色
#+BEGIN_SRC js
<script>
function changeImage()
{
element=document.getElementById('myimage')
if (element.src.match("bulbon"))
  {
  element.src="/i/eg_bulboff.gif";
  }
else
  {
  element.src="/i/eg_bulbon.gif";
  }
}
</script>

<img id="myimage" onclick="changeImage()" src="/i/eg_bulboff.gif">
#+END_SRC


*** 改变元素的样式
#+BEGIN_SRC js
<script>
function myFunction()
{
x=document.getElementById("demo") // 找到元素
x.style.color="#ff0000";          // 改变样式
}
</script>

<button type="button" onclick="myFunction()">点击这里</button>
#+END_SRC

* jquery
#+BEGIN_EXAMPLE
$('#abc')
#+END_EXAMPLE
就可以获得类似
#+BEGIN_EXAMPLE
document.getElementById('abc')
#+END_EXAMPLE
的效果，注意只是类似。

$实际上是一个函数，其将返回一个数组，里面装着jquery对象（如果没有命中则返回空数组）。你可以用 ~$(DOMobject)~ 来讲某个javascript原DOM对象转变成为jquery对象。

按照多个class查找:
#+BEGIN_EXAMPLE
var a = $('.red.green'); // 注意没有空格！
// 符合条件的节点：
// <div class="red green">...</div>
// <div class="blue green red">...</div>
#+END_EXAMPLE

按照属性查找:
#+BEGIN_EXAMPLE
var icons = $('[name^=icon]'); // 找出所有name属性值以icon开头的DOM
// 例如: name="icon-1", name="icon-2"
var names = $('[name$=with]'); // 找出所有name属性值以with结尾的DOM
// 例如: name="startswith", name="endswith"
#+END_EXAMPLE

组合查找
#+BEGIN_EXAMPLE
$('p,div'); // 把<p>和<div>都选出来
$('p.red,p.green'); // 把<p class="red">和<p class="green">都选出来
#+END_EXAMPLE

层级查找
#+BEGIN_EXAMPLE
$('ul.lang li.lang-javascript'); // [<li class="lang-javascript">JavaScript</li>]
$('div.testing li.lang-javascript'); // [<li class="lang-javascript">JavaScript</li>] 
#+END_EXAMPLE

子选择器
#+BEGIN_EXAMPLE
$('ul.lang>li.lang-javascript'); // 可以选出[<li class="lang-javascript">JavaScript</li>]
$('div.testing>li.lang-javascript'); // [], 无法选出，因为<div>和<li>不构成父子关系
#+END_EXAMPLE

这些语法都是css选择中的高级语法，这里都略过了。

jquery对象有下面这些属性:

- find() :: 进一步查找
- parent() :: 获得父节点
- next() :: 同一层级下一个节点
- prev() :: 同一层级前一个节点
- filter() :: 过滤掉某些节点
上面这几个方法都可以接受和之前描述一样的css选择语法。

-----

- text() :: 本jquery对象标签元素所含文本
- html() :: 该jquery对象标签元素所含html

-----
- css() :: 修改css属性
#+BEGIN_EXAMPLE
$('#test-css li.dy>span').css('background-color', '#ffd351').css('color', 'red');
#+END_EXAMPLE

#+BEGIN_EXAMPLE
var div = $('#test-div');
div.hasClass('highlight'); // false， class是否包含highlight
div.addClass('highlight'); // 添加highlight这个class
div.removeClass('highlight'); // 删除highlight这个class
#+END_EXAMPLE

- attr() :: 修改属性
- removeAttr() :: 删除属性
#+BEGIN_EXAMPLE
// <div id="test-div" name="Test" start="1">...</div>
var div = $('#test-div');
div.hasAttr('name'); // true
div.attr('name'); // 'Test'
div.attr('name', 'Hello'); // div的name属性变为'Hello'
div.removeAttr('name'); // 删除name属性
div.attr('name'); // undefined
#+END_EXAMPLE

- val() :: 获取某个表单元素input的value值


-----

- append() :: 添加一个子节点
- prepend() :: 添加一个子节点，到最前。
- before() :: 某个节点之前插入
- after() :: 某个节点之后插入
- remove() :: 删除某个节点


** 显示或隐藏
#+BEGIN_EXAMPLE
var a = $('a[target=_blank]');
a.hide(); // 隐藏
a.show(); // 显示
#+END_EXAMPLE


** 事件

超链接被点击就触发了click事件，某个标签元素可以如下定义:
#+BEGIN_EXAMPLE
a.on('click', function () {
    alert('Hello!');
});
#+END_EXAMPLE

~on~ 某个事件，则执行某个动作。
或者:
#+BEGIN_EXAMPLE
a.click(function () {
    alert('Hello!');
});
#+END_EXAMPLE


*** 鼠标事件
- click :: 鼠标单击时触发；
- dblclick :: 鼠标双击时触发；
- mouseenter :: 鼠标进入时触发；
- mouseleave :: 鼠标移出时触发；
- mousemove :: 鼠标在DOM内部移动时触发 （接受e ，e.pageX是鼠标x值，e.pageY是鼠标Y值）
- hover :: 鼠标进入和退出时触发两个函数，相当于mouseenter加上mouseleave。

*** 键盘事件
键盘事件仅作用在当前焦点的DOM上，通常是<input>和<textarea>。

- keydown :: 键盘按下时触发；
- keyup :: 键盘松开时触发；
- keypress :: 按一次键后触发。


*** 其他事件
focus：当DOM获得焦点时触发；
blur：当DOM失去焦点时触发；
change：当<input>、<select>或<textarea>的内容改变时触发；
submit：当<form>提交时触发；
ready：当页面被载入并且DOM树完成初始化后触发。

文档初始化事件: 
#+BEGIN_EXAMPLE
$(function () {
    // init...
});
#+END_EXAMPLE
这种写法就是处理document的ready事件的。

*** 取消某个事件绑定
#+BEGIN_EXAMPLE
a.off('click', hello);
#+END_EXAMPLE

** ajax函数
~$.ajax()~ 提供ajax支持。




* ajax


* json
json之前了解过一些了:
#+BEGIN_EXAMPLE
number：和JavaScript的number完全一致；
boolean：就是JavaScript的true或false；
string：就是JavaScript的string；
null：就是JavaScript的null；
array：就是JavaScript的Array表示方式——[]；
object：就是JavaScript的{ ... }表示方式。
#+END_EXAMPLE

** stringify函数
某个javascript对象字符串化。
#+BEGIN_EXAMPLE
JSON.stringify(xiaoming, null, '  ');
#+END_EXAMPLE


** parse函数
将某个javascript对象刷成json对象。
#+BEGIN_EXAMPLE
JSON.parse('[1,2,3,true]'); 
#+END_EXAMPLE



* 参考资料
1. JavaScript: The Definitive Guide; Author: David Flanagan; version: Sixth Edition.
2. https://www.codecademy.com
3. [[http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000][廖雪峰的javascript教程]] 
4. Javascript in Ten Minutes; Author: Spencer Tipping; version: 2013 March <<cite4>>
5. [[http://eloquentjavascript.net/][eloquent javascript]]
